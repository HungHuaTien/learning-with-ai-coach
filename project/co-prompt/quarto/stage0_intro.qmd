---
title: "C-CAFE-C框架與提示語四階段學習"
authors: ["Hung-Hua Tien","AI Coach"]
date: today
categories: ["CAFEC", "AI 教學", "語義提示語"]
format:
  html:
    toc: true
    toc-depth: 2
    code-fold: true
    mermaid:
      enabled: true
    self-contained: true
  pdf:
    pdf-engine: xelatex
    include-in-header:
      text: |
        \usepackage{ctex}
        \usepackage{amsthm,mathrsfs}
    fontsize: 11pt
    linestretch: 1.5
    toc: true
    number-sections: true
    geometry: margin=1in
execute:
  echo: false
  eval: true
  output: false
  warning: false
  error: false
editor: visual
---

### 🌐 主架構：四階段模型 



```{mermaid}
flowchart TD

subgraph Framework
C-CAFE-C[**🎯C-CAFE-C**<br>**語義設計框架**]
C-CAFE-C --> Context[**Context**<br>Environment<br>背景情境]
C-CAFE-C --> Character[**Character** <br>AI角色與受眾] 
C-CAFE-C --> Action[**Action**<br>任務動作與步驟] 
C-CAFE-C --> Format[**Format**<br>輸出格式與形式]
C-CAFE-C --> Example[**Example**<br>範例與樣本數] 
C-CAFE-C --> Constraint[**Constraint**<br>條件與參數]

end

Model <--> Framework

subgraph Model
Start["**🧠提示語學習<br>四階段模型**"]
Start --> Stage1[**人:想清楚**<br>問題-思考]
Start--> Stage2[**AI:說明白**<br>任務-溝通]
Start --> Stage3[**技能:做得好**<br>旅程-協作]
Start--> Stage4[**未來:創得出**<br>藍圖-機制]
end

    classDef darkBlue fill:#1E3A8A,stroke:#374151,stroke-width:2px,color:#FFFFFF;
    classDef lightBlue fill:#93C5FD,stroke:#1E3A8A,stroke-width:2px,color:#1F2937;
    
    class Start,C-CAFE-C darkBlue;
    class Stage1,Stage2,Stage3,Stage4 lightBlue
    class Character,Action,Format,Example,Constraint,Context lightBlue
```





# Stage 1｜人：想清楚

我們和學生一樣，都站在人機協作的時代門口。
 在課堂上，我們不斷嘗試一件事：**怎麼把腦中混亂的想法，變成 AI 聽得懂的語言。**
 這個任務不只艱難，而且前所未有。

我們發現，所有的提示語教學，如果從「怎麼寫得更好」開始，常常會卡關。
 真正的問題不是「寫不好」，而是「還沒想清楚」。

------

## 🧭 提示語不是魔法咒語，是一種語言的練習

現在坊間很多人談提示語工程，一開始就進入「如何寫出好提示」這個問題，教各種技巧與模版。
 但我們越教越覺得：**這不只是技巧問題，而是語言與思考的問題。**

如果我們把提示語單純定義為「叫 AI 做事的指令」，那麼就會直接落入「怎麼寫出有效指令」的技術討論。學生之所以不會寫提示語，是因為不知道自己要幹嘛；AI 之所以給不出好回答，是因為我們根本沒說清楚；甚至我們以為已經說清楚，其實只是自言自語。

於是我們開始反過來思考：

- 與其教寫提示語，能不能先教「怎麼想清楚」？
- 與其複製技巧，有沒有一個語言結構可以幫助釐清需求？
- 與其只是叫 AI 幫忙，我們能不能設計出更好的「合作流程」？

這些問題讓我們開始走出自己的語義路線。

------

## 🔍 CAFEC 是一種語義思考框架

CAFEC 最早只是我們從語境(Context) 總結出的提示語六要素架構：

- **C** – Character（角色設定：AI 角色與目標受眾）
- **A** – Action（任務動作與步驟）
- **F** – Format（輸出格式與表現形式）
- **E** – Example（範例支援與樣本設定）
- **C** – Constraint（限制條件與技術參數）

但慢慢地，我們發現：CAFEC 不只是格式，**它其實是一種語義模組的設計工具，幫助人把腦中的想法結構化**，釐清任務與語義之間的關係

它的重點不是幫助 AI「做」，而是幫助人「想」。
甚至對多數學生而言：**寫好提示語的關鍵不是寫得漂亮，而是先搞清楚自己的需求。**

------

## 🎯 Stage 1 的目標：讓學生從使用者變成設計者

我們的大一課程《AI 跨域應用與程式設計》就從這裡開始。
 我們帶學生從最基本的語義元件出發，一步一步練習：

1. **理解 AI 是怎麼解讀語言的**（從人話到任務模組）
2. **把自己的需求分解成語義元素**（角色、動作、格式、例子、限制）
3. **學會分析他人的提示語**，再重構自己的語義結構


### 比如，我不知道該不該換工作

#### 🟦 第一部分｜自我澄清問題

1. 你目前的角色是什麼？
2. 你正在面對什麼樣的問題或任務？
3. 你想達成的結果是什麼？
4. 這個任務的對象是誰？
5. 對這個任務的成功標準是什麼？

#### 🟨 第二部分｜提示語撰寫

請根據上面你的思考結果，寫出一段「說明白」的提示語，讓AI能理解你的需求並幫你產出正確的協助建議。

```markdown
提示語範例: 
我是一位行銷領域的從業者，正在考慮是否轉職，
目前工作穩定但成長有限，新機會有挑戰但不確定風險。
請幫我列出轉職與不轉職的優缺點，並從以下面向分析：收入、學習機會、生活品質。
```

這些練習讓學生逐漸意識到：

> 原來提示語不是在對 AI 下指令，而是在**說明我的任務與想法**。

------

## 🧩 我們學到的事：CAFEC 是學習結構化思考的起點

在實際教學中，我們開始使用 CAFEC Prompt Checklist，幫助學生檢查提示語中的語義缺漏；
 我們觀察到：

- 多數學生忽略的是 **Format**（輸出形式）與 **Constraint**（限制條件）
- 有些學生不確定要給不給範例，導致 **Example** 模組空白
- 甚至有些人沒想過要設定角色（Character），一開頭就說「幫我做⋯⋯」

這些看似簡單的問題，正是「還沒想清楚」的證據。
 而 CAFEC 的價值就在這裡：**它像一張語義地圖，提醒我們在出發前，先確認帶齊所有語意裝備**。

因為一旦學生熟悉 CAFEC 的欄位邏輯，在書寫提示語之前就能有意識地檢查自己的輸入是否完整——這其實是一種結構化思考的訓練。當語義欄位逐漸內化為思維習慣，語義缺失不再發生時，就是 CAFEC 真正真正有效思考框架的作用。

------

## 🛤️ 這條路我們一起走，也邀請你同行

這篇文章，是我們四階段架構中第一階段的記錄。

- **Stage 1｜人：想清楚**
- Stage 2｜AI：說明白
- Stage 3｜資料：找證據
- Stage 4｜共創：做決定

我們會一篇篇把它寫完，發佈在 Medium，也整理成課程講義。

因為我們相信：**這條提示語的學習之路，不只是為了掌握 AI，而是為了重新學會思考與表達。**

如果你也在思考「如何跟 AI 好好合作」，歡迎關注這系列，讓我們一起，把話說清楚，把事想明白。

---

---

# Stage 2｜AI：說明白

當我們帶學生走過「想清楚」的階段，下一步，便是如何讓 AI "聽懂"。

這個階段的重點，不再只是人腦內部的釐清，而是語言外部的傳達。——**如何把我們的思考，轉化成 AI 能理解並正確執行的語言？**

------

## 一、這階段是什麼？｜語義轉換 × 任務說明

這一階段，是提示語學習最容易被誤解的地方。許多教學一開始就跳入「怎麼寫好提示語」，卻忽略了：**提示語本身其實是一種語言轉譯的技術，而不是排列咒語的技巧。**

這些問題其實不是程式設計問題，而是語言與邏輯的問題。這也就是為什麼，我們主張：**提示語是語義結構化的語言設計工作，讓語言能轉譯成 AI 理解的任務，而不只是技巧堆疊。**

### 📍問題的關鍵: AI 如何看待你的提示語？

人類使用語言時，經常依賴語境、默契與簡化，但 AI 處理語言則是：

- 試圖找出**任務的動詞與執行結構**
- 呼叫內部任務模組（如分類器、摘要器、生成器等）。

所以，**語義不清會導致 AI 呼叫錯誤模組、走錯任務邏輯。**

提示語學習的核心，其實是「將語言轉譯成能讓AI正確理解的任務」。

------

## 二、目前發展到哪？｜從技巧提示到策略分流

現在坊間討論許多策略，像是 Zero-shot、Few-shot、Chain-of-thought（COT）、ReAct、Tree-of-thought 等等。但這些很棒的策略都假設「你已經知道要做什麼」，且能清楚表達。

然而我們的觀察是:

- 學生搞不清楚自己要幹嘛，但寫了很複雜的句子
- 學生以為自己說清楚了，但 AI 不知道你在幹嘛

這就是提示語學習的第一道瓶頸。



此外，我們發現提示語學習其實牽涉一個更深的議題：**人與 AI 如何分工協作？**

提示語學習的關鍵，不只是在於「寫出好指令」，而是學會選擇協作策略，並設計語言結構支撐這個策略。

### 🧠 不同的提示語策略 = 不同的協作關係

- **全權交給 AI（如 COT）**：適合 AI 已擅長的任務
- **明確規劃人主導（如 SOP）**：適合流程清楚的人工作流
- **人機對話來回（如討論）**：適合探索式任務與創作

### ❗補充一個常見誤解

> 「API 才是進階用法」其實並不完全正確：

- 任務明確可用 API，但探索與思辨反而需要互動式提示語
- 與 AI 協作的本質，是根據需求與任務設計策略與語言結構

AI 使用策略沒有高低之分，關鍵在於**是否與任務需求與人機關係對應**。

------

## 三、我們的貢獻與主張：CAFEC 的語義語法與動詞核心

CAFEC 的五大語義欄位（Character, Action, Format, Example, Constraint），本質上就是一種「語言語法結構」。它的設計初衷，並不是讓大家多記一個格式，而是：

- 幫助你把任務具體化成語言
- 幫助你確認語義邏輯的齊備與清晰
- 幫助 AI 更精準地理解你的需求

其中的 **Action 模組**，我們特別強調兩個層次：

1. **動詞（Verb）**：代表 AI 理解任務意圖的核心行動（如「摘要」「分類」「比較」等）
2. **方法（Method）**：代表人與 AI 之間的合作策略（如一步一步推理、依步驟執行、反覆提問）

目前坊間提示工程大多聚焦方法設計，但我們發現：**在教育現場，動詞選得好，比策略用得炫更重要。**

動詞不只是任務的名字，而是 AI 行為的起點。它決定了 AI 如何理解你的任務、怎麼拆解你的語句、並選擇回應的邏輯路徑。

Claude 曾指出：CAFEC 是語義模組的語法，能以結構化語言傳達任務意圖，讓人「說明白」、AI「聽得懂」。

------

## 四、我們的教學策略：從語義元素到提示語流程設計對應的課程與教學策略

這個階段的核心教學對象，是大二課程《與 AI 一起詠唱》，是第一次大量引入：

- CAFEC Prompt
- 語義變項資料庫（動詞庫、格式庫...）
- Meta Prompt × Parsing Prompt

學生會練習：

- 拆解提示語
- 替換語義元素
- 比對動詞與任務結構
- 分析語義策略與協作效果

這些訓練讓學生**開始像設計者與觀察者一樣思考提示語**，而不只是使用者。

------

## 五、我們要做的事：從結構學習走向策略協作

我們正在進行兩件事：

1. **語義變項資料庫建構**（角色、動詞、格式、範例、限制）
2. **提示語模擬器與協作流程卡設計**：觀察語義組合 × 設計人機分工

因為我們相信：

> 提示語不是「下命令」，而是**設計任務與策略的語言工具**。



### 📌 Stage 1 × Stage 2 的總結

- Stage 1 解決的是「人搞不清楚」的問題
- Stage 2 解決的是「AI 聽不懂你說什麼」的問題

CAFEC 就是這個關鍵橋梁，幫助人類將內在思考轉化為 AI 理解的語言結構。

 這是一種語義設計能力，也是一種新的語言素養。

---

---

# Stage 3｜技能：做得好

當我們已經能夠「想清楚 × 說明白」，接下來最自然的追問是：**能不能真的做得好?**

這正是第三階段的學習任務：**你能不能透過語言，把任務切得清楚、建構成步驟，讓 AI 協助你完成，進而讓你自己也逐步精通？**

也就是說，把 AI 作為技能擴張的夥伴，將語言設計轉譯為協作流程，讓人與 AI 能夠彼此發揮所長、協同完成任務。這正是 C–CAFE–C 在 Stage 3 發揮威力的地方。

------

## 一、從提示語到策略：不只是給指令，而是設計合作

我們發現許多初學者學習提示語的盲點，是把提示語當作「寫一次、出結果」的單向指令。然而，真正有效的 AI 協作往往更像是一場 **逐步對話、共同拆解、策略互動的過程**。

### 🔍 提示語的學習，不只是「寫出好指令」，

### 而是「設計好合作的策略」。

這也是我們在 Stage 3 特別強調的一個觀念：

> **提示語 ≠ 咒語；提示語 = 語義結構化的合作設計。**



許多初學者也常問：「為什麼我照著網路上的提示語寫，結果卻不好？」我們的觀察是：

> 這些問題，其實不是程式設計問題，而是語言與邏輯的問題。

這也就是為什麼，我們主張：**提示語是「語義結構化的語言設計」工作，讓語言能轉譯成 AI 理解的任務，而不只是技巧堆疊。**



### 📍問題的關鍵：AI 如何看待你的提示語？

人類使用語言時，經常依賴語境、默契與簡化；但 AI 處理語言的方式截然不同：它會嘗試從語句中**找出任務的動詞與執行結構**，進而呼叫內部的任務模組（如分類器、摘要器、生成器等）。

因此，**語義不清並非只是人與 AI 溝通失敗，而是直接導致 AI 呼叫錯誤模組、走錯任務邏輯的根本原因。**

這說明了：提示語學習的核心其實是「將語言轉譯成能讓 AI 正確理解的任務」。

------

## 二、語義元素 × 任務策略：動詞與模組的交織地圖

AI 看到提示語時，會嘗試從中判斷出：

- 我需要「執行什麼動作」？（任務動詞）
- 這個任務是怎麼一步步執行的？（方法與步驟）

C–CAFE–C 中的 Action 元素，是整個任務設計的核心。例如：不同的動詞，牽動的語義模組與策略需求也會不同：

- 分析（analyze）：需要資料（Constraint）、觀察維度（Environment）
- 撰寫（write）：需要格式（Format）、受眾角色（Character）
- 比較（compare）：需要多組輸入（Example）、清楚的評估標準（Constraint）

不同的任務動詞，其搭配的語義元素強度與比重也會有所不同，這正是語義結構的微調功夫。

此外，我們還觀察到一個重要趨勢：

> **提示語其實也隱含著策略的選擇。**

例如：

- 使用 COT（Chain of Thought）表示要逐步思考
- 使用 Tool use 表示需要外部工具支援
- 使用明確任務結構（如三步驟、六要點）表示期待 AI 遵守流程

這些策略其實都可以在提示語中透過 C–CAFE–C 的語義模組設計出來，讓 AI 知道該怎麼工作。

------

## 三、不同合作策略的選擇：互動式、任務式與 API 式

提示語的學習，其實也是合作策略的學習。
 我們大致可將人與 AI 的協作模式，分為三類：

| 類型   | 特徵                               | 適用情境                       |
| ------ | ---------------------------------- | ------------------------------ |
| 互動式 | 一步步提問、追問、澄清與總結       | 問題模糊、需共同探索           |
| 任務式 | 一次明確定義任務與結構、請 AI 執行 | 任務明確、需求清晰             |
| API 式 | 透過外部程式串接、模組化自動執行   | 重複性高、規則明確、需高度效率 |

我們常聽到：「會 API 才是高手」。但事實上，**最核心的技能仍是語義設計與任務定義的能力**：

> 若任務定義不清、語言設計不當，即使串接 API 也難以保證成果品質。

這說明了：**語言設計是所有策略的起點，語義結構是 AI 協作的地基。**

------

## 四、案例解構：資料庫 × 策略觀摩 × 任務成長

為了讓 C–CAFE–C 真正成為幫助學生與使用者「做得更好」的工具，我們結合了以下資源：

1. **提示語資料庫**：提供常見任務類型的 CAFEC 模板與範例，觀摩各類任務與語義元素搭配
2. **觀摩模組（Prompt Gallery）**：讓學生可以看到別人如何設計提示語，逐步進步
3. **策略模擬任務卡**：讓學生練習指定不同語義模組組合，看 AI 回應會如何變化
4. **Meta Prompt 設計**：引導學生選擇合作策略
5. **Parsing Prompt 技術**：幫助 AI 拆解複雜任務結構
6. **Chain-of-Thought (COT)**：透過逐步推理強化任務品質

這些設計讓 C–CAFE–C 不只是「幫你寫提示語」，而是成為一種：

> **能幫助你成長的語義學習工具。**

這些資源與技術，形成一個整合的提示語學習場域，讓學生不只是寫提示語，而是「打造自己與 AI 的合作工作坊」。

------

## 五、轉向未來的基礎：語義思考力 × 策略表達力

Stage 3 最後，我們想提醒的是：

> 提示語不是終點，它是策略與思考的起點。

### 📘 重點並非叫 AI 做得完美，而是：

> **我能否透過語言，把任務切得清楚、建構成步驟，讓 AI 協助我完成，並讓我逐步精通。**

在 AI 時代，「做得好」的關鍵，不再是誰會操作最多工具，而是：

> 誰能最有效地把問題語義結構化，並用語言設計出有效的任務流程。

技能的本質，是語言與邏輯的結構化能力。CAFEC 就是這樣一種語言與任務的橋樑。它不只是工具的介面，而是技能建構與任務學習的引擎。讓我們理解語言背後的任務設計，也讓我們在語言中描繪合作藍圖。

這不只是技術訓練，更是「**設計語言 × 設計合作**」的核心能力。

這樣的學習過程，本身就是一種技能訓練，也是一種人機共學。

下一站，讓我們一起想想未來：C–CAFE–C 還能走到哪裡去

----

----

# Stage 4｜未來：創得出

當一個人能「想清楚、說明白、做得好」，最後的關鍵就是：

> **你是否能進一步創造新的任務、新的應用、新的合作形式？**

這不只是執行力的展現，更是創造力與未來感的指標。

CAFEC 能走的方向，或許也是我們人類在 AI 時代要走的方向。CAFEC 的故事不只是語言結構的革新，而是一場跨越教育、研究與社會應用的行動計畫。

------

## 一、人的角色：在技術變遷中走出自己的路

在前三階段中，我們見證了語言如何轉化為任務的引擎、策略的載體與技能的介面。但來到 Stage 4，我們必須面對一個核心問題：

> **人，在 AI 技術不斷演化的時代，應扮演什麼角色？**

我們的答案是：**在每一階段努力找出具體可行的方法與工具，將 AI 整合進自己的生活與工作中。**

如果從提示語的角度來看，傳統的提示語學習，重點是「怎麼下好一個 prompt」，但我們逐漸發現：

> **提示語的終點，從寫好提示語到做好任務設計：人是任務的設計師。**

這意味著：人要從「會使用 AI」轉向「會設計 AI 任務」的角色。

CAFEC 的六個語義模組，具備任務設計語言的結構潛力，已經讓我們看到：**人與 AI 合作的可能性，可以被語言精緻地描述與設計**，也有機會未來任務設計語言的「基礎語法」。雖然CAFEC 的語義架構並不是提示語框架的唯一解，但它也確實在前三個階段幫助我們少走了冤枉路，這是一種可以被複製、改造與擴散的語言實踐經驗。

------

## 二、多模態時代的挑戰與突破

多模態人工智慧（Multimodal AI）正從文字生成技術的基礎上快速演進，整合視覺、聽覺、觸覺等多種感官數據，以實現更類人的理解與互動能力。

Stage 4 的一大變化是任務不再只是「文字處理」，而是跨越：

- 語音 × 文字
- 圖像 × 故事
- 表格 × 圖表 × 解說
- 影片 × 脈絡 × 剪輯邏輯

在多模態時代，提示語（Prompt）設計不僅限於文字，還需涵蓋圖片、音訊、影片等多種輸入形式，除了掌握提示語工程的基本技能外，還帶來新的學習需求與挑戰。例如

- 如何針對不同模態（文字、圖片、音訊）設計清晰、具體且結構化的提示。
- 如何跨模對齊，引導模型聚焦提示中的關鍵模態信息。
- 如何排列多重提示詞的順序與權重。

這時候，CAFEC 的每一個元素都必須重新轉譯成「模態邏輯」：

- Format：不是只指定文字格式，而是影片風格、語音語調、圖表類型
- Constraint：從字數擴展為長度、節奏、畫面元素、風格限制
- Character：需要精確設定 narrator、演員、剪輯者、講者角色

進入多模態時代後，提示語設計不僅要學會文字提示的清晰與具體，還要掌握跨模態的引導技巧與安全防護，並適應多樣化輸入輸出格式的複雜度。CAFEC 作為語義骨架，也正是在這樣的多模態生成中發揮穩定支撐的作用。



## 三、跨領域的挑戰：語義 × 系統 × 社會

AI 的下一階段，已經不只是模型效能與 API 整合的競賽，而是：

- 語言設計如何影響任務品質？
- 工具整合如何提升系統效率？
- 人與 AI 的協作能否進入社會運作層面？

這些問題不只是技術問題，更是語義與邏輯的挑戰。

因此我們提出：**未來的提示語學習，不能只看技術層面，而要納入跨領域的理論與研究方法。**

舉例而言：

- 經濟學提供效用與選擇理論，幫助理解語義設計的成本效益
- 管理學與系統思考提供任務流程最佳化與資源配置的概念
- 教育與心理學提供學習策略、認知負荷與動機維度

這些跨域觀點，讓提示語學不再只是工程領域的副產品，而是一種需要知識整合與研究驗證的全新領域。

------

## 四、因果推論 × CAFEC 的潛力場域

資料科學通常分為三大層面：**描述性分析、預測性分析與因果分析**。我們觀察到：

- **在描述性與預測性分析上，AI 已是強而有力的助手**，無論是統計摘要、視覺化、或模型預測，都能快速完成。
- **但在因果分析上，AI 仍需要人類的主導**：從問題定義、假設建構、控制變項，到實驗設計與解釋推論，這些步驟都無法單靠模型自動完成。

這正是 CAFEC 發揮另一個非常重要潛力的場域：**可作為語義控制的實驗基礎結構。**

CAFEC 的語義結構具備 **MECE（Mutually Exclusive, Collectively Exhaustive）** 特性，能協助使用者在設計提示語時明確定義變項、操弄元素與控制語境。它允許我們設計出具有變項控制的提示語 AB 測試、策略比對、風格調整，並觀察：

- 哪些語義元素影響最大？
- 哪些組合產出最穩定？
- 使用者對什麼回應最滿意？
- 明確設計 Action（任務與操作）與 Constraint（限制條件）
- 對照 Example（樣本變化）觀察生成差異
- 固定 Format（輸出格式）作為分析基準

這些問題構成提示語科學化的基礎。這種結構化語義輸入，可以自然地轉化為一種實驗設計的語言形式，使得 **提示語實驗的因果推論** 成為可能。

> 因果推論，不只是研究的高階技能，更是決策的基礎素養。

這也是目前最缺乏跨域人才的領域。對於任何具備程式設計與資料分析基礎的學生來說，不論其所學是商業、社會科學還是心理、教育領域，**學會用 CAFEC 設計因果實驗的提示語，都是一條值得走的路。**

此外，CAFEC 的語義結構具備 MECE 特性，能協助使用者在設計提示語時明確定義變項、操弄元素與控制語境，這在目前提示語框架中，是非常稀缺的珍貴特質。

------

## 五、我們想做的事：教育與實驗場域的雙重推進

我們的教學與研究，正在同步進行以下幾件事：

1. **教材建構**：以 CAFEC 為核心語義模組，設計提示語任務與策略教案
2. **語料建置**：建立提示語與生成結果的語義變項對照資料庫
3. **策略模擬**：設計學生互動任務卡，實際操作提示語變項對生成的影響
4. **實驗設計**：進行提示語 AB 測試與回應品質量化分析

這些任務都回到最初的目標：

> 讓 CAFEC 成為一種思考的語法，一種教學的骨架，也是一種研究的語言。

------

## 結語：未來已來，我們在這裡搭橋

未來十年，AI 技術會不斷演化，但真正影響社會的關鍵的能力，是能不能設計出好任務。

- 誰能說明需求，定義問題，讓 AI 能接手部分解決
- 誰能配置流程，設計任務，讓 AI 擅長的部分發揮最大效能
- 誰能設計互動節點，讓人與 AI 真正互補，讓人機彼此反饋與優化



當我們不再只是用 AI，而是與 AI 合作設計未來，我們的角色已經悄悄改變。

我們相信人機共創不是幻想：

> 每一個人在自己的領域中，都有機會設計出與 AI 共創的工作方式。



AI不只是工具而已，我們可以用 AI 做些真正重要的事。同樣地，我們也相信CAFEC是一個起點，一種讓語言成為策略、讓結構成為力量的起點。這個框架的真正價值，不只是幫助你「寫出一個好提示語」，而是：

> **從語義出發，幫助你成為能設計任務、設計協作流程、設計語言結構的未來創造者。



---

---

